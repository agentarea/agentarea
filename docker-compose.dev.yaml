version: "3.8"
services:
  app:
    container_name: agentarea-backend
    build:
      context: core
    ports:
      - "8000:8000"
    restart: always
    environment:
      # S3 settings
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - AWS_REGION=${MINIO_REGION}
      - S3_BUCKET_NAME=${DOCUMENTS_BUCKET}
      - AWS_ENDPOINT_URL=http://minio:9000
      # Database settings
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Server settings
      - PORT=${PORT:-8000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - RELOAD=${RELOAD:-true}
      - WORKERS=${WORKERS:-1}
    volumes:
      - ./core/agentarea:/app/agentarea
      - ./core/alembic:/app/alembic
      - ${INFISICAL_TOKEN_VOLUME}:/app/bootstrap
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      app_migrations:
        condition: service_completed_successfully
      bootstrap:
        condition: service_completed_successfully
    command: ["python", "-m", "cli", "serve", "--reload", "--log-level=${LOG_LEVEL:-info}", "--workers=${WORKERS:-1}"]

  app_migrations:
    build:
      context: core
    environment:
    ## Have to add it for now
          # S3 settings
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - AWS_REGION=${MINIO_REGION}
      - S3_BUCKET_NAME=${DOCUMENTS_BUCKET}
      - AWS_ENDPOINT_URL=http://minio:9000
      # Only database settings
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./core/alembic:/app/alembic
    depends_on:
      db:
        condition: service_healthy
      bootstrap:
        condition: service_completed_successfully
    command: ["python", "-m", "cli", "migrate"]

  bootstrap:
    build:
      context: bootstrap
      dockerfile: Dockerfile
    working_dir: /app/bootstrap/code
    volumes:
      - ./bootstrap/code:/app/bootstrap/code
      - ./bootstrap/scripts/providers.yaml:/app/bootstrap/code/providers.yaml
      - ./core/agentarea:/app/agentarea
      - ${INFISICAL_TOKEN_VOLUME}:/app/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_ENDPOINT=http://minio:9000
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-your-secure-password}
      - ORGANIZATION_NAME=${ORGANIZATION_NAME:-your-org-name}
      - INFISICAL_URL=http://infisical:8080
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
  infisical_db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data_infisical:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  infisical:
    container_name: infisical-backend
    restart: unless-stopped
    depends_on:
      infisical_db:
        condition: service_healthy
      redis:
        condition: service_started
    image: infisical/infisical:latest-postgres
    pull_policy: always
    env_file: .env
    ports:
      - 3333:8080
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@infisical_db:5432/${POSTGRES_DB}
  redis:
    image: redis
    container_name: infisical-dev-redis
    env_file: .env
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  postgres_data_infisical:
  minio_data: 
  redis_data:
  infisical_bootstrap:

networks:
  infisical:
    driver: bridge

