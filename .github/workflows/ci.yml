name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.12"
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        if: ${{ env.ACT != 'true' }}
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "core/**/pyproject.toml"

      - name: Install uv (act fallback)
        if: ${{ env.ACT == 'true' }}
        run: |
          curl -Ls https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: core
        run: |
          uv sync --group lint
          uv sync --group dev

      - name: Run ruff check
        working-directory: core
        run: uv run ruff check .

      - name: Run ruff format check
        working-directory: core
        run: uv run ruff format --check .

      - name: Run pyright
        working-directory: core
        run: uv run pyright

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agentarea_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        if: ${{ env.ACT != 'true' }}
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "core/**/pyproject.toml"

      - name: Install uv (act fallback)
        if: ${{ env.ACT == 'true' }}
        run: |
          curl -Ls https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: core
        run: |
          uv sync --group test
          uv sync --group dev

      - name: Run tests
        working-directory: core
        env:
          DATABASE_URL: ${{ env.ACT == 'true' && 'postgresql://postgres:postgres@postgres:5432/agentarea_test' || 'postgresql://postgres:postgres@localhost:5432/agentarea_test' }}
          REDIS_URL: ${{ env.ACT == 'true' && 'redis://redis:6379/0' || 'redis://localhost:6379/0' }}
        run: |
          uv run pytest tests/ \
            --cov-report=xml \
            --cov-report=term \
            --junitxml=test-results.xml \
            -n auto

      - name: Upload coverage to Codecov
        if: ${{ env.ACT != 'true' }}
        uses: codecov/codecov-action@v4
        with:
          file: ./core/coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: core/test-results.xml

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        component: [api, worker]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        if: ${{ env.ACT != 'true' }}
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install uv (act fallback)
        if: ${{ env.ACT == 'true' }}
        run: |
          curl -Ls https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Build package
        working-directory: core
        run: uv build apps/${{ matrix.component }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-dist
          path: core/dist/

  docker-api:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Log in to Private Registry
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
          password: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            agentarea/agentarea-api
            ${{ secrets.PRIVATE_REGISTRY }}/agentarea/agentarea-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=dev,enable={{is_default_branch}}
            type=sha,format=short,prefix=commit-
            type=sha,prefix={{branch}}-
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: core
          file: core/apps/api/Dockerfile
          push: ${{ env.ACT != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        if: ${{ env.ACT != 'true' }}
        uses: astral-sh/setup-uv@v4

      - name: Install uv (act fallback)
        if: ${{ env.ACT == 'true' }}
        run: |
          curl -Ls https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: core
        run: uv sync --group dev

      - name: Run bandit security linter
        working-directory: core
        run: uv run bandit -r . -x tests/ -f json -o bandit-report.json

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: core/bandit-report.json

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        if: ${{ env.ACT != 'true' }}
        uses: astral-sh/setup-uv@v4

      - name: Install uv (act fallback)
        if: ${{ env.ACT == 'true' }}
        run: |
          curl -Ls https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: core
        run: uv sync --group dev

      - name: Benchmark build performance
        working-directory: core
        run: |
          echo "## Build Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Build Time |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|" >> $GITHUB_STEP_SUMMARY
          
          for component in api worker; do
            start_time=$(date +%s.%N)
            uv build apps/$component
            end_time=$(date +%s.%N)
            build_time=$(echo "$end_time - $start_time" | bc)
            echo "| $component | ${build_time}s |" >> $GITHUB_STEP_SUMMARY
          done
  docker-worker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Log in to Private Registry
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
          password: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            agentarea/agentarea-worker
            ${{ secrets.PRIVATE_REGISTRY }}/agentarea/agentarea-worker
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=dev,enable={{is_default_branch}}
            type=sha,format=short,prefix=commit-
            type=sha,prefix={{branch}}-
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: core
          file: core/apps/worker/Dockerfile
          push: ${{ env.ACT != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  docker-frontend:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Log in to Private Registry
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
          password: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            agentarea/agentarea-frontend
            ${{ secrets.PRIVATE_REGISTRY }}/agentarea/agentarea-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=dev,enable={{is_default_branch}}
            type=sha,format=short,prefix=commit-
            type=sha,prefix={{branch}}-
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: ${{ env.ACT != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  docker-bootstrap:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Log in to Private Registry
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
          password: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            agentarea/agentarea-bootstrap
            ${{ secrets.PRIVATE_REGISTRY }}/agentarea/agentarea-bootstrap
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=dev,enable={{is_default_branch}}
            type=sha,format=short,prefix=commit-
            type=sha,prefix={{branch}}-
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: bootstrap
          file: bootstrap/Dockerfile
          push: ${{ env.ACT != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  docker-mcp-manager:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Log in to Private Registry
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
          password: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            agentarea/agentarea-mcp-manager
            ${{ secrets.PRIVATE_REGISTRY }}/agentarea/agentarea-mcp-manager
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=dev,enable={{is_default_branch}}
            type=sha,format=short,prefix=commit-
            type=sha,prefix={{branch}}-
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: mcp-infrastructure/go-mcp-manager
          file: mcp-infrastructure/go-mcp-manager/Dockerfile
          push: ${{ env.ACT != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max