"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ —Å Ollama
============================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –∏ –≤—ã–∑–≤–∞—Ç—å Ollama —á–µ—Ä–µ–∑ –Ω–µ–≥–æ.
–ë–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞ ID, –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–ó–∞–ø—É—Å–∫:
    cd core
    python tests/integration/test_agent_ollama.py
"""

import asyncio

from litellm import LiteLLM


class SimpleAgent:
    """–ü—Ä–æ—Å—Ç–æ–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, name: str, model: str):
        self.name = name
        self.model = model
        self.llm = LiteLLM(model=model)

    async def ask(self, question: str) -> str:
        """–ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É"""
        try:
            response = await self.llm.acompletion(
                messages=[
                    {
                        "role": "system",
                        "content": f"You are {self.name}, a helpful assistant. Be concise.",
                    },
                    {"role": "user", "content": question},
                ]
            )
            return response.choices[0].message.content
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∞–≥–µ–Ω—Ç–∞: {e}")


class TestAgentOllama:
    """–¢–µ—Å—Ç—ã –∞–≥–µ–Ω—Ç–∞ —Å Ollama"""

    async def test_create_agent(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        agent = SimpleAgent("TestAgent", "ollama_chat/qwen2.5")
        assert agent.name == "TestAgent"
        assert agent.model == "ollama_chat/qwen2.5"
        print("‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    async def test_agent_math_question(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"""
        agent = SimpleAgent("MathAgent", "ollama_chat/qwen2.5")

        question = "What is 5 + 3? Just give the number."
        response = await agent.ask(question)

        print(f"–ê–≥–µ–Ω—Ç: {agent.name}")
        print(f"–í–æ–ø—Ä–æ—Å: {question}")
        print(f"–û—Ç–≤–µ—Ç: {response}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        assert response is not None
        assert len(response.strip()) > 0
        print("‚úÖ –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å")

    async def test_agent_russian_question(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        agent = SimpleAgent("RussianAgent", "ollama_chat/qwen2.5")

        question = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ."
        response = await agent.ask(question)

        print(f"–ê–≥–µ–Ω—Ç: {agent.name}")
        print(f"–í–æ–ø—Ä–æ—Å: {question}")
        print(f"–û—Ç–≤–µ—Ç: {response}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        assert response is not None
        assert len(response.strip()) > 0
        print("‚úÖ –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")

    async def test_multiple_agents(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤"""
        agent1 = SimpleAgent("Agent1", "ollama_chat/qwen2.5")
        agent2 = SimpleAgent("Agent2", "ollama_chat/qwen2.5")

        # –û–±–∞ –∞–≥–µ–Ω—Ç–∞ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
        question = "Say hi in one word"

        response1 = await agent1.ask(question)
        response2 = await agent2.ask(question)

        print(f"–ê–≥–µ–Ω—Ç 1 –æ—Ç–≤–µ—Ç–∏–ª: {response1}")
        print(f"–ê–≥–µ–Ω—Ç 2 –æ—Ç–≤–µ—Ç–∏–ª: {response2}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏
        assert response1 is not None and len(response1.strip()) > 0
        assert response2 is not None and len(response2.strip()) > 0
        print("‚úÖ –ù–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")


async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å Ollama")
    print("=" * 50)

    test_instance = TestAgentOllama()

    try:
        print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
        await test_instance.test_create_agent()

        print("\n2. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É...")
        await test_instance.test_agent_math_question()

        print("\n3. –†—É—Å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É...")
        await test_instance.test_agent_russian_question()

        print("\n4. –ù–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤...")
        await test_instance.test_multiple_agents()

        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("–ê–≥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å Ollama –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã!")

    except Exception as e:
        print(f"\nüí• –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return False

    return True


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = asyncio.run(main())
    exit(0 if success else 1)
