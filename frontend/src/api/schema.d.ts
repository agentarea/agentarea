/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/agents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Agents */
        get: operations["list_agents_v1_agents__get"];
        put?: never;
        /** Create Agent */
        post: operations["create_agent_v1_agents__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/agents/{agent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Agent */
        get: operations["get_agent_v1_agents__agent_id__get"];
        put?: never;
        post?: never;
        /** Delete Agent */
        delete: operations["delete_agent_v1_agents__agent_id__delete"];
        options?: never;
        head?: never;
        /** Update Agent */
        patch: operations["update_agent_v1_agents__agent_id__patch"];
        trace?: never;
    };
    "/v1/agents/{agent_id}/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Agent Tasks
         * @description List all tasks for the specified agent.
         */
        get: operations["list_agent_tasks_v1_agents__agent_id__tasks__get"];
        put?: never;
        /**
         * Create Task For Agent
         * @description Create a new task for the specified agent.
         */
        post: operations["create_task_for_agent_v1_agents__agent_id__tasks__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/agents/{agent_id}/tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Agent Task
         * @description Get a specific task for the specified agent.
         */
        get: operations["get_agent_task_v1_agents__agent_id__tasks__task_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/llm-models/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Llm Models */
        get: operations["list_llm_models_v1_llm_models__get"];
        put?: never;
        /** Create Llm Model */
        post: operations["create_llm_model_v1_llm_models__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/llm-models/{model_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Llm Model */
        get: operations["get_llm_model_v1_llm_models__model_id__get"];
        put?: never;
        post?: never;
        /** Delete Llm Model */
        delete: operations["delete_llm_model_v1_llm_models__model_id__delete"];
        options?: never;
        head?: never;
        /** Update Llm Model */
        patch: operations["update_llm_model_v1_llm_models__model_id__patch"];
        trace?: never;
    };
    "/v1/llm-models/instances/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Llm Model Instances */
        get: operations["list_llm_model_instances_v1_llm_models_instances__get"];
        put?: never;
        /** Create Llm Model Instance */
        post: operations["create_llm_model_instance_v1_llm_models_instances__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/llm-models/instances/{instance_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Llm Model Instance */
        get: operations["get_llm_model_instance_v1_llm_models_instances__instance_id__get"];
        put?: never;
        post?: never;
        /** Delete Llm Model Instance */
        delete: operations["delete_llm_model_instance_v1_llm_models_instances__instance_id__delete"];
        options?: never;
        head?: never;
        /** Update Llm Model Instance */
        patch: operations["update_llm_model_instance_v1_llm_models_instances__instance_id__patch"];
        trace?: never;
    };
    "/v1/mcp-servers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Mcp Servers */
        get: operations["list_mcp_servers_v1_mcp_servers__get"];
        put?: never;
        /** Create Mcp Server */
        post: operations["create_mcp_server_v1_mcp_servers__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-servers/{server_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Mcp Server */
        get: operations["get_mcp_server_v1_mcp_servers__server_id__get"];
        put?: never;
        post?: never;
        /** Delete Mcp Server */
        delete: operations["delete_mcp_server_v1_mcp_servers__server_id__delete"];
        options?: never;
        head?: never;
        /** Update Mcp Server */
        patch: operations["update_mcp_server_v1_mcp_servers__server_id__patch"];
        trace?: never;
    };
    "/v1/mcp-servers/{server_id}/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deploy Mcp Server */
        post: operations["deploy_mcp_server_v1_mcp_servers__server_id__deploy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-servers/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mcp Server Templates
         * @description Get all available MCP server templates from the YAML configuration.
         */
        get: operations["get_mcp_server_templates_v1_mcp_servers_templates_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-servers/templates/{template_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mcp Server Template
         * @description Get a specific MCP server template by key.
         */
        get: operations["get_mcp_server_template_v1_mcp_servers_templates__template_key__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-servers/from-template/{template_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Mcp Server From Template
         * @description Create an MCP server from a template.
         */
        post: operations["create_mcp_server_from_template_v1_mcp_servers_from_template__template_key__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-server-instances/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Mcp Server Instances */
        get: operations["list_mcp_server_instances_v1_mcp_server_instances__get"];
        put?: never;
        /** Create Mcp Server Instance */
        post: operations["create_mcp_server_instance_v1_mcp_server_instances__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-server-instances/{instance_id}/environment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Instance Environment
         * @description Get environment variables for an MCP server instance.
         *     Note: This endpoint should have proper authentication and authorization in production.
         */
        get: operations["get_instance_environment_v1_mcp_server_instances__instance_id__environment_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-server-instances/{instance_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Mcp Server Instance */
        get: operations["get_mcp_server_instance_v1_mcp_server_instances__instance_id__get"];
        put?: never;
        post?: never;
        /** Delete Mcp Server Instance */
        delete: operations["delete_mcp_server_instance_v1_mcp_server_instances__instance_id__delete"];
        options?: never;
        head?: never;
        /** Update Mcp Server Instance */
        patch: operations["update_mcp_server_instance_v1_mcp_server_instances__instance_id__patch"];
        trace?: never;
    };
    "/v1/mcp-server-instances/{instance_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Mcp Server Instance */
        post: operations["start_mcp_server_instance_v1_mcp_server_instances__instance_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-server-instances/{instance_id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop Mcp Server Instance */
        post: operations["stop_mcp_server_instance_v1_mcp_server_instances__instance_id__stop_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/asyncapi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Serve Asyncapi Schema
         * @description Serve the AsyncAPI schema as an HTML response.
         */
        get: operations["serve_asyncapi_schema_asyncapi_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/asyncapi.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download App Json Schema */
        get: operations["download_app_json_schema_asyncapi_json_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/asyncapi.yaml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download App Yaml Schema */
        get: operations["download_app_yaml_schema_asyncapi_yaml_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AgentCreate */
        AgentCreate: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Instruction */
            instruction: string;
            /** Model Id */
            model_id: string;
            tools_config?: components["schemas"]["ToolsConfig"] | null;
            events_config?: components["schemas"]["EventsConfig"] | null;
            /** Planning */
            planning?: boolean | null;
        };
        /** AgentResponse */
        AgentResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Status */
            status: string;
            /** Description */
            description?: string | null;
            /** Instruction */
            instruction?: string | null;
            /** Model Id */
            model_id?: string | null;
            /** Tools Config */
            tools_config?: {
                [key: string]: unknown;
            } | null;
            /** Events Config */
            events_config?: {
                [key: string]: unknown;
            } | null;
            /** Planning */
            planning?: boolean | null;
        };
        /** AgentUpdate */
        AgentUpdate: {
            /** Name */
            name?: string | null;
            /** Capabilities */
            capabilities?: string[] | null;
            /** Description */
            description?: string | null;
            /** Instruction */
            instruction?: string | null;
            /** Model Id */
            model_id?: string | null;
            tools_config?: components["schemas"]["ToolsConfig"] | null;
            events_config?: components["schemas"]["EventsConfig"] | null;
            /** Planning */
            planning?: boolean | null;
        };
        /** EventsConfig */
        EventsConfig: {
            /** Events */
            events?: string[] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LLMModelCreate */
        LLMModelCreate: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Provider */
            provider: string;
            /** Model Type */
            model_type: string;
            /** Endpoint Url */
            endpoint_url: string;
            /** Context Window */
            context_window: string;
            /**
             * Is Public
             * @default false
             */
            is_public: boolean;
        };
        /** LLMModelInstanceCreate */
        LLMModelInstanceCreate: {
            /**
             * Model Id
             * Format: uuid
             */
            model_id: string;
            /** Api Key */
            api_key: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /**
             * Is Public
             * @default false
             */
            is_public: boolean;
        };
        /** LLMModelInstanceResponse */
        LLMModelInstanceResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Model Id
             * Format: uuid
             */
            model_id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Status */
            status: string;
            /** Is Public */
            is_public: boolean;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** LLMModelInstanceUpdate */
        LLMModelInstanceUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Api Key */
            api_key?: string | null;
            /** Is Public */
            is_public?: boolean | null;
            /** Status */
            status?: string | null;
        };
        /** LLMModelResponse */
        LLMModelResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Provider */
            provider: string;
            /** Model Type */
            model_type: string;
            /** Endpoint Url */
            endpoint_url: string;
            /** Context Window */
            context_window: string;
            /** Status */
            status: string;
            /** Is Public */
            is_public: boolean;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** LLMModelUpdate */
        LLMModelUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Provider */
            provider?: string | null;
            /** Model Type */
            model_type?: string | null;
            /** Endpoint Url */
            endpoint_url?: string | null;
            /** Context Window */
            context_window?: string | null;
            /** Is Public */
            is_public?: boolean | null;
            /** Status */
            status?: string | null;
        };
        /** MCPConfig */
        MCPConfig: {
            /** Mcp Server Id */
            mcp_server_id: string;
            /** Requires User Confirmation */
            requires_user_confirmation?: boolean | null;
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
        };
        /** MCPServerCreate */
        MCPServerCreate: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Docker Image Url */
            docker_image_url: string;
            /** Version */
            version: string;
            /**
             * Tags
             * @default []
             */
            tags: string[];
            /**
             * Is Public
             * @default false
             */
            is_public: boolean;
            /**
             * Env Schema
             * @default []
             */
            env_schema: {
                [key: string]: unknown;
            }[] | null;
        };
        /** MCPServerInstanceCreateRequest */
        MCPServerInstanceCreateRequest: {
            /**
             * Name
             * @description Name of the MCP server instance
             */
            name: string;
            /**
             * Description
             * @description Description of the instance
             */
            description?: string | null;
            /**
             * Server Spec Id
             * @description ID of the MCP server spec (optional)
             */
            server_spec_id?: string | null;
            /**
             * Json Spec
             * @description Configuration specification as JSON
             */
            json_spec: {
                [key: string]: unknown;
            };
        };
        /** MCPServerInstanceResponse */
        MCPServerInstanceResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Server Spec Id */
            server_spec_id: string | null;
            /** Json Spec */
            json_spec: {
                [key: string]: unknown;
            };
            /** Status */
            status: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** MCPServerInstanceUpdate */
        MCPServerInstanceUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Json Spec */
            json_spec?: {
                [key: string]: unknown;
            } | null;
            /** Status */
            status?: string | null;
        };
        /** MCPServerResponse */
        MCPServerResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Docker Image Url */
            docker_image_url: string;
            /** Version */
            version: string;
            /** Tags */
            tags: string[];
            /** Is Public */
            is_public: boolean;
            /** Env Schema */
            env_schema: {
                [key: string]: unknown;
            }[];
            /** Status */
            status: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** MCPServerUpdate */
        MCPServerUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Docker Image Url */
            docker_image_url?: string | null;
            /** Version */
            version?: string | null;
            /** Tags */
            tags?: string[] | null;
            /** Is Public */
            is_public?: boolean | null;
            /** Status */
            status?: string | null;
        };
        /** TaskCreate */
        TaskCreate: {
            /** Description */
            description: string;
            /**
             * Parameters
             * @default {}
             */
            parameters: {
                [key: string]: unknown;
            };
        };
        /** TaskResponse */
        TaskResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Agent Id
             * Format: uuid
             */
            agent_id: string;
            /** Description */
            description: string;
            /** Parameters */
            parameters: {
                [key: string]: unknown;
            };
            /** Status */
            status: string;
            /** Result */
            result?: {
                [key: string]: unknown;
            } | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** ToolsConfig */
        ToolsConfig: {
            /** Mcp Server Configs */
            mcp_server_configs?: components["schemas"]["MCPConfig"][] | null;
            /** Planning */
            planning?: boolean | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_agents_v1_agents__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentResponse"][];
                };
            };
        };
    };
    create_agent_v1_agents__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_v1_agents__agent_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_agent_v1_agents__agent_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_agent_v1_agents__agent_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_agent_tasks_v1_agents__agent_id__tasks__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_task_for_agent_v1_agents__agent_id__tasks__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_task_v1_agents__agent_id__tasks__task_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_llm_models_v1_llm_models__get: {
        parameters: {
            query?: {
                status?: string | null;
                is_public?: boolean | null;
                provider?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_llm_model_v1_llm_models__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMModelCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_llm_model_v1_llm_models__model_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_llm_model_v1_llm_models__model_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_llm_model_v1_llm_models__model_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMModelUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_llm_model_instances_v1_llm_models_instances__get: {
        parameters: {
            query?: {
                model_id?: string | null;
                status?: string | null;
                is_public?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelInstanceResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_llm_model_instance_v1_llm_models_instances__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMModelInstanceCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_llm_model_instance_v1_llm_models_instances__instance_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_llm_model_instance_v1_llm_models_instances__instance_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_llm_model_instance_v1_llm_models_instances__instance_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMModelInstanceUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_mcp_servers_v1_mcp_servers__get: {
        parameters: {
            query?: {
                status?: string | null;
                is_public?: boolean | null;
                tag?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_mcp_server_v1_mcp_servers__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MCPServerCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mcp_server_v1_mcp_servers__server_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_mcp_server_v1_mcp_servers__server_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_mcp_server_v1_mcp_servers__server_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MCPServerUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deploy_mcp_server_v1_mcp_servers__server_id__deploy_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mcp_server_templates_v1_mcp_servers_templates_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    }[];
                };
            };
        };
    };
    get_mcp_server_template_v1_mcp_servers_templates__template_key__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_mcp_server_from_template_v1_mcp_servers_from_template__template_key__post: {
        parameters: {
            query: {
                server_name: string;
                server_description?: string;
                version?: string;
            };
            header?: never;
            path: {
                template_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_mcp_server_instances_v1_mcp_server_instances__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerInstanceResponse"][];
                };
            };
        };
    };
    create_mcp_server_instance_v1_mcp_server_instances__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MCPServerInstanceCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_instance_environment_v1_mcp_server_instances__instance_id__environment_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mcp_server_instance_v1_mcp_server_instances__instance_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_mcp_server_instance_v1_mcp_server_instances__instance_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_mcp_server_instance_v1_mcp_server_instances__instance_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MCPServerInstanceUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_mcp_server_instance_v1_mcp_server_instances__instance_id__start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stop_mcp_server_instance_v1_mcp_server_instances__instance_id__stop_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    serve_asyncapi_schema_asyncapi_get: {
        parameters: {
            query?: {
                sidebar?: boolean;
                info?: boolean;
                servers?: boolean;
                operations?: boolean;
                messages?: boolean;
                schemas?: boolean;
                errors?: boolean;
                expandMessageExamples?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_app_json_schema_asyncapi_json_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    download_app_yaml_schema_asyncapi_yaml_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
