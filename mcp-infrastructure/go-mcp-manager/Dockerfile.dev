# Development stage with live reload
FROM golang:1.25-alpine AS development

# Install development dependencies including Air for live reload and Traefik
RUN apk add --no-cache \
    git \
    ca-certificates \
    curl \
    podman \
    buildah \
    skopeo \
    fuse-overlayfs \
    shadow \
    dumb-init \
    wget \
    tar \
    iptables \
    && rm -rf /var/cache/apk/*

# Install Traefik with architecture detection
ARG TARGETARCH
RUN case "${TARGETARCH}" in \
        "amd64") TRAEFIK_ARCH="amd64" ;; \
        "arm64") TRAEFIK_ARCH="arm64" ;; \
        *) TRAEFIK_ARCH="amd64" ;; \
    esac \
    && wget -O /tmp/traefik.tar.gz "https://github.com/traefik/traefik/releases/download/v3.0.4/traefik_v3.0.4_linux_${TRAEFIK_ARCH}.tar.gz" \
    && tar -xzf /tmp/traefik.tar.gz -C /usr/local/bin/ \
    && chmod +x /usr/local/bin/traefik \
    && rm /tmp/traefik.tar.gz

# Install Air for live reloading
RUN go install github.com/air-verse/air@latest

# Configure Podman
RUN mkdir -p /etc/containers \
    && printf '[registries.search]\nregistries = ["docker.io", "quay.io"]\n' > /etc/containers/registries.conf \
    && printf '[storage]\ndriver = "overlay"\nrunroot = "/tmp/containers"\ngraphroot = "/var/lib/containers/storage"\n\n[storage.options]\nmount_program = "/usr/bin/fuse-overlayfs"\n' > /etc/containers/storage.conf \
    && printf '[containers]\n' > /etc/containers/containers.conf

# Create non-root user for Podman
RUN adduser -D -u 1000 -g users -s /bin/sh podman-user \
    && mkdir -p /home/podman-user/.local/share/containers \
    && chown -R podman-user:users /home/podman-user/.local \
    && echo "podman-user:100000:65536" > /etc/subuid \
    && echo "podman-user:100000:65536" > /etc/subgid

# Set working directory
WORKDIR /app

# Initialize Podman for the user (as podman-user)
USER podman-user
RUN podman system migrate 2>/dev/null || true
USER root

# Create Traefik configuration directory
RUN mkdir -p /etc/traefik /var/lib/traefik /var/log/traefik \
    && chown -R root:root /etc/traefik /var/lib/traefik /var/log/traefik

# Expose ports (8000 for mcp-manager, 80/443 for Traefik, 8080 for Traefik dashboard)
EXPOSE 8000 80 443 8080

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Run with Air for live reloading
CMD ["air", "-c", ".air.toml"]

# Production build stage
FROM golang:1.25-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates

# Set working directory
WORKDIR /app

# Copy go.mod and go.sum
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application for target architecture
ARG TARGETARCH
ARG TARGETOS
RUN CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -a -installsuffix cgo -o bin/mcp-manager ./cmd/mcp-manager

# Production runtime stage
FROM alpine:3.20 AS production

# Install runtime dependencies including Podman and Traefik
RUN apk add --no-cache \
    ca-certificates \
    curl \
    podman \
    buildah \
    skopeo \
    fuse-overlayfs \
    shadow \
    dumb-init \
    wget \
    tar \
    iptables \
    && rm -rf /var/cache/apk/*

# Install Traefik with architecture detection
ARG TARGETARCH
RUN case "${TARGETARCH}" in \
        "amd64") TRAEFIK_ARCH="amd64" ;; \
        "arm64") TRAEFIK_ARCH="arm64" ;; \
        *) TRAEFIK_ARCH="amd64" ;; \
    esac \
    && wget -O /tmp/traefik.tar.gz "https://github.com/traefik/traefik/releases/download/v3.0.4/traefik_v3.0.4_linux_${TRAEFIK_ARCH}.tar.gz" \
    && tar -xzf /tmp/traefik.tar.gz -C /usr/local/bin/ \
    && chmod +x /usr/local/bin/traefik \
    && rm /tmp/traefik.tar.gz

# Configure Podman
RUN mkdir -p /etc/containers \
    && printf '[registries.search]\nregistries = ["docker.io", "quay.io"]\n' > /etc/containers/registries.conf \
    && printf '[storage]\ndriver = "overlay"\nrunroot = "/tmp/containers"\ngraphroot = "/var/lib/containers/storage"\n\n[storage.options]\nmount_program = "/usr/bin/fuse-overlayfs"\n' > /etc/containers/storage.conf \
    && printf '[containers]\n' > /etc/containers/containers.conf

# Create non-root user for Podman
RUN adduser -D -u 1000 -g users -s /bin/sh podman-user \
    && mkdir -p /home/podman-user/.local/share/containers \
    && chown -R podman-user:users /home/podman-user/.local \
    && echo "podman-user:100000:65536" > /etc/subuid \
    && echo "podman-user:100000:65536" > /etc/subgid

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/bin/mcp-manager /app/mcp-manager

# Copy startup script  
COPY start-go.sh /app/start.sh
RUN chmod +x /app/start.sh



# Create Traefik configuration directory
RUN mkdir -p /etc/traefik /var/lib/traefik /var/log/traefik \
    && chown -R root:root /etc/traefik /var/lib/traefik /var/log/traefik

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Expose ports (8000 for mcp-manager, 80/443 for Traefik, 8080 for Traefik dashboard)
EXPOSE 8000 80 443 8080

# Switch to non-root user for setup
USER podman-user

# Initialize Podman for the user
RUN podman system migrate 2>/dev/null || true

# Switch back to root to run the service (needed for container management)
USER root

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Run the startup script
CMD ["/app/start.sh"] 