"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Ollama
==================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å Ollama –Ω–∞–ø—Ä—è–º—É—é –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Ö–∞—Ä–¥–∫–æ–¥ ID.

–ó–∞–ø—É—Å–∫:
    cd core
    python tests/integration/test_ollama_simple.py
"""

import asyncio
import pytest
from litellm import acompletion


class TestOllamaSimple:
    """–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama"""
    
    async def test_ollama_available(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Ollama –¥–æ—Å—Ç—É–ø–Ω–∞"""
        try:
            response = await acompletion(
                model="ollama_chat/qwen2.5",
                messages=[{"role": "user", "content": "Test"}],
                timeout=10
            )
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç
            assert True
            print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            print(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            assert False, f"Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}"
    
    async def test_ollama_math_response(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Ollama –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        try:
            response = await acompletion(
                model="ollama_chat/qwen2.5",
                messages=[{"role": "user", "content": "What is 2 + 2? Answer with just the number."}],
                timeout=10
            )
            
            content = response.choices[0].message.content
            print(f"–í–æ–ø—Ä–æ—Å: What is 2 + 2?")
            print(f"–û—Ç–≤–µ—Ç: {content}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            assert content is not None
            assert len(content.strip()) > 0
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Ollama")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {e}")
            assert False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {e}"
    
    async def test_ollama_russian_response(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Ollama –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        try:
            response = await acompletion(
                model="ollama_chat/qwen2.5",
                messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ."}],
                timeout=10
            )
            
            content = response.choices[0].message.content
            print(f"–í–æ–ø—Ä–æ—Å: –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            print(f"–û—Ç–≤–µ—Ç: {content}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            assert content is not None
            assert len(content.strip()) > 0
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –æ—Ç Ollama")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—Å—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–µ: {e}")
            assert False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—Å—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–µ: {e}"


async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama")
    print("=" * 50)
    
    test_instance = TestOllamaSimple()
    
    try:
        print("\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama...")
        await test_instance.test_ollama_available()
        
        print("\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç...")
        await test_instance.test_ollama_math_response()
        
        print("\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º...")
        await test_instance.test_ollama_russian_response()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return False
    
    return True


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = asyncio.run(main())
    exit(0 if success else 1) 