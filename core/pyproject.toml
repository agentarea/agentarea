[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "agentarea-workspace"
version = "0.1.0"
authors = [
    { name="Artem Astapenko", email="artem.astapenko@agentarea.ai" },
    { name="Julia Astapenko", email="julia.astapenko@agentarea.ai" },
]
description = "AgentArea workspace with API, Worker and shared libraries"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "a2a-sdk>=0.2.8",
    "google-adk>=1.1.1",
    "python-dotenv>=1.1.0",
    "pytz>=2025.2",
    "watchfiles>=1.1.0",
]

[tool.uv.workspace]
members = [
    "apps/api",
    "apps/worker",
    "apps/cli",
    "libs/common",
    "libs/agents",
    "libs/llm",
    "libs/mcp",
    "libs/tasks",
    "libs/secrets",
    "libs/execution",
    "libs/context",
    "libs/triggers"
]

[tool.uv.sources]
agentarea-common = { workspace = true }
agentarea-agents = { workspace = true }
agentarea-llm = { workspace = true }
agentarea-mcp = { workspace = true }
agentarea-tasks = { workspace = true }
agentarea-secrets = { workspace = true }
agentarea-execution = { workspace = true }
agentarea-context = { workspace = true }
agentarea-triggers = { workspace = true }
agentarea-api = { workspace = true }
agentarea-worker = { workspace = true }
agentarea-cli = { workspace = true }

[dependency-groups]
dev = [
    "ruff>=0.11.4",
    "pyright>=1.1.400",
    "aiosqlite>=0.21.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.0",
    "coverage[toml]>=7.6.0",
    "agentarea-common",
    "agentarea-agents",
    "agentarea-llm",
    "agentarea-mcp",
    "agentarea-tasks",
    "agentarea-secrets",
    "agentarea-execution",
    "agentarea-context",
    "agentarea-triggers",
    "agentarea-api",
    "agentarea-worker",
    "pytest-env>=1.1.5",
]

test = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.0",
    "coverage[toml]>=7.6.0",
]

lint = [
    "ruff>=0.11.4",
    "pyright>=1.1.400",
]

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "W",   # pycodestyle warnings 
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RUF", # Ruff-specific rules
]
ignore = [
    "D102",
    "D103",
    "D107",
    "D101",
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D203",    # One blank line required before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "E501",    # Line too long
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.params.Depends", "fastapi.Query", "fastapi.params.Query"]



[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=agentarea_common",
    "--cov=agentarea_agents", 
    "--cov=agentarea_llm",
    "--cov=agentarea_mcp",
    "--cov=agentarea_tasks",
    "--cov=agentarea_secrets",
    "--cov=agentarea_context",
    "--cov=agentarea_triggers",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Test environment isolation - override env vars for docker-compose services
env = [
    # Database (docker-compose postgres service mapped to localhost:5432)
    "POSTGRES_HOST=localhost",
    "POSTGRES_PORT=5432", 
    "POSTGRES_USER=postgres",
    "POSTGRES_PASSWORD=postgres",
    "POSTGRES_DB=aiagents",
    
    # Redis (docker-compose redis service mapped to localhost:6379) 
    "REDIS_URL=redis://localhost:6379",
    
    # Temporal (docker-compose temporal service mapped to localhost:7233)
    "TEMPORAL_SERVER_URL=localhost:7233",
    "TEMPORAL_NAMESPACE=default",
    
    # Test-specific settings to prevent production interference
    "APP_ENV=test",
    "DEBUG=false",
    "SECRET_MANAGER_TYPE=local",
    "USE_LEGACY_TASK_EXECUTION=true",
]

[tool.coverage.run]
source = [
    "libs/common/agentarea_common",
    "libs/agents/agentarea_agents",
    "libs/llm/agentarea_llm",
    "libs/mcp/agentarea_mcp",
    "libs/tasks/agentarea_tasks",
    "libs/secrets/agentarea_secrets",
    "libs/execution/agentarea_execution",
    "libs/context/agentarea_context",
    "libs/triggers/agentarea_triggers",
    "apps/api/agentarea_api",
    "apps/worker/agentarea_worker",
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = false
skip_empty = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.pyright]
include = [
    "libs/*/agentarea_*",
    "apps/*/agentarea_*",
    "tests"
]
exclude = [
    "**/__pycache__",
    "**/node_modules",
    "**/.venv",
    "**/dist",
    "**/build",
]
defineConstant = { DEBUG = true }
pythonVersion = "3.12"
pythonPlatform = "All"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportTypedDictNotRequiredAccess = "warning"
reportPrivateUsage = "warning"
reportTypeCommentUsage = "warning"
reportIncompatibleMethodOverride = "warning"
reportIncompatibleVariableOverride = "warning"
reportInconsistentConstructor = "warning"
reportOverlappingOverloads = "warning"
reportPossiblyUnboundVariable = "warning"
reportMissingSuperCall = false
reportUninitializedInstanceVariable = "warning"
reportUnknownParameterType = "warning"
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownMemberType = false
reportUnknownVariableType = false
reportCallInDefaultInitializer = false
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportImplicitStringConcatenation = "warning"
reportUnusedCallResult = false
reportUnusedExpression = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportMatchNotExhaustive = "warning"

# Hatch build configuration for workspace root
[tool.hatch.build.targets.wheel]
packages = ["cli.py", "main.py"]
include = [
    "cli.py",
    "main.py", 
    "alembic.ini"
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build]
exclude = ["README.md"]
