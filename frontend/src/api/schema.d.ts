/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/protocol/rpc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle Jsonrpc
         * @description Unified A2A JSON-RPC endpoint.
         *
         *     Handles all A2A protocol methods:
         *     - message/send
         *     - message/stream
         *     - tasks/get
         *     - tasks/cancel
         *     - agent/authenticatedExtendedCard
         */
        post: operations["handle_jsonrpc_v1_protocol_rpc_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/protocol/agents/{agent_id}/card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Agent Card
         * @description Get agent card for discovery using real agent service.
         */
        get: operations["get_agent_card_v1_protocol_agents__agent_id__card_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/protocol/ag-ui": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle Ag Ui Request
         * @description AG-UI endpoint for CopilotKit integration.
         *
         *     Converts A2A protocol events to AG-UI events for frontend consumption.
         */
        post: operations["handle_ag_ui_request_v1_protocol_ag_ui_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/protocol/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check for the protocol endpoint.
         */
        get: operations["health_check_v1_protocol_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Message
         * @description Send a chat message to an agent.
         *
         *     Unified endpoint that handles both A2A protocol and REST API.
         */
        post: operations["send_message_v1_chat_messages_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/messages/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stream Message
         * @description Stream a chat message response from an agent.
         *
         *     Returns Server-Sent Events (SSE) compatible with A2A protocol.
         */
        post: operations["stream_message_v1_chat_messages_stream_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/conversations/{session_id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Conversation History
         * @description Get conversation history for a session.
         */
        get: operations["get_conversation_history_v1_chat_conversations__session_id__messages_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Conversations
         * @description List all conversations for a user.
         */
        get: operations["list_conversations_v1_chat_conversations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Agents
         * @description Get list of available agents.
         */
        get: operations["get_available_agents_v1_chat_agents_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/agents/{agent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Agent
         * @description Get details for a specific agent.
         */
        get: operations["get_agent_v1_chat_agents__agent_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint.
         */
        get: operations["health_check_v1_chat_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/agents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Agents
         * @description List all agents.
         */
        get: operations["list_agents_v1_agents__get"];
        put?: never;
        /**
         * Create Agent
         * @description Create a new agent.
         */
        post: operations["create_agent_v1_agents__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/agents/{agent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Agent
         * @description Get an agent by ID.
         */
        get: operations["get_agent_v1_agents__agent_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Agent
         * @description Delete an agent.
         */
        delete: operations["delete_agent_v1_agents__agent_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Agent
         * @description Update an agent.
         */
        patch: operations["update_agent_v1_agents__agent_id__patch"];
        trace?: never;
    };
    "/v1/agents/{agent_id}/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Agent Tasks
         * @description List all tasks for the specified agent.
         */
        get: operations["list_agent_tasks_v1_agents__agent_id__tasks__get"];
        put?: never;
        /**
         * Create Task For Agent
         * @description Create and execute a task for the specified agent using Temporal workflows.
         */
        post: operations["create_task_for_agent_v1_agents__agent_id__tasks__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/agents/{agent_id}/tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Agent Task
         * @description Get a specific task for the specified agent using workflow status.
         */
        get: operations["get_agent_task_v1_agents__agent_id__tasks__task_id__get"];
        put?: never;
        post?: never;
        /**
         * Cancel Agent Task
         * @description Cancel a specific task workflow for the specified agent.
         */
        delete: operations["cancel_agent_task_v1_agents__agent_id__tasks__task_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/agents/{agent_id}/tasks/{task_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Agent Task Status
         * @description Get the execution status of a specific task workflow.
         */
        get: operations["get_agent_task_status_v1_agents__agent_id__tasks__task_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-servers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Mcp Servers */
        get: operations["list_mcp_servers_v1_mcp_servers__get"];
        put?: never;
        /** Create Mcp Server */
        post: operations["create_mcp_server_v1_mcp_servers__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-servers/{server_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Mcp Server */
        get: operations["get_mcp_server_v1_mcp_servers__server_id__get"];
        put?: never;
        post?: never;
        /** Delete Mcp Server */
        delete: operations["delete_mcp_server_v1_mcp_servers__server_id__delete"];
        options?: never;
        head?: never;
        /** Update Mcp Server */
        patch: operations["update_mcp_server_v1_mcp_servers__server_id__patch"];
        trace?: never;
    };
    "/v1/mcp-servers/{server_id}/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deploy Mcp Server */
        post: operations["deploy_mcp_server_v1_mcp_servers__server_id__deploy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-servers/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mcp Server Templates
         * @description Get all available MCP server templates from the YAML configuration.
         */
        get: operations["get_mcp_server_templates_v1_mcp_servers_templates_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-servers/templates/{template_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mcp Server Template
         * @description Get a specific MCP server template by key.
         */
        get: operations["get_mcp_server_template_v1_mcp_servers_templates__template_key__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-servers/from-template/{template_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Mcp Server From Template
         * @description Create an MCP server from a template.
         */
        post: operations["create_mcp_server_from_template_v1_mcp_servers_from_template__template_key__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-server-instances/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Mcp Server Instances */
        get: operations["list_mcp_server_instances_v1_mcp_server_instances__get"];
        put?: never;
        /** Create Mcp Server Instance */
        post: operations["create_mcp_server_instance_v1_mcp_server_instances__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-server-instances/{instance_id}/environment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Instance Environment
         * @description Get environment variables for an MCP server instance.
         *
         *     Note: This endpoint should have proper authentication and authorization in production.
         */
        get: operations["get_instance_environment_v1_mcp_server_instances__instance_id__environment_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-server-instances/{instance_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Mcp Server Instance */
        get: operations["get_mcp_server_instance_v1_mcp_server_instances__instance_id__get"];
        put?: never;
        post?: never;
        /** Delete Mcp Server Instance */
        delete: operations["delete_mcp_server_instance_v1_mcp_server_instances__instance_id__delete"];
        options?: never;
        head?: never;
        /** Update Mcp Server Instance */
        patch: operations["update_mcp_server_instance_v1_mcp_server_instances__instance_id__patch"];
        trace?: never;
    };
    "/v1/mcp-server-instances/{instance_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Mcp Server Instance */
        post: operations["start_mcp_server_instance_v1_mcp_server_instances__instance_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mcp-server-instances/{instance_id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop Mcp Server Instance */
        post: operations["stop_mcp_server_instance_v1_mcp_server_instances__instance_id__stop_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/provider-specs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Provider Specs
         * @description List all provider specifications.
         */
        get: operations["list_provider_specs_v1_provider_specs__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/provider-specs/with-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Provider Specs With Models
         * @description List all provider specifications with their available models.
         */
        get: operations["list_provider_specs_with_models_v1_provider_specs_with_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/provider-specs/{provider_spec_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Provider Spec
         * @description Get a specific provider specification with its models.
         */
        get: operations["get_provider_spec_v1_provider_specs__provider_spec_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/provider-specs/by-key/{provider_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Provider Spec By Key
         * @description Get a provider specification by its key (e.g., 'openai', 'anthropic').
         */
        get: operations["get_provider_spec_by_key_v1_provider_specs_by_key__provider_key__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/provider-configs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Provider Configs
         * @description List provider configurations.
         */
        get: operations["list_provider_configs_v1_provider_configs__get"];
        put?: never;
        /**
         * Create Provider Config
         * @description Create a new provider configuration.
         */
        post: operations["create_provider_config_v1_provider_configs__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/provider-configs/{config_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Provider Config
         * @description Get a specific provider configuration.
         */
        get: operations["get_provider_config_v1_provider_configs__config_id__get"];
        /**
         * Update Provider Config
         * @description Update a provider configuration.
         */
        put: operations["update_provider_config_v1_provider_configs__config_id__put"];
        post?: never;
        /**
         * Delete Provider Config
         * @description Delete a provider configuration.
         */
        delete: operations["delete_provider_config_v1_provider_configs__config_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/model-specs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Model Specs
         * @description List model specifications with optional filtering.
         */
        get: operations["list_model_specs_v1_model_specs__get"];
        put?: never;
        /**
         * Create Model Spec
         * @description Create a new model specification.
         */
        post: operations["create_model_spec_v1_model_specs__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/model-specs/{model_spec_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Model Spec
         * @description Get a specific model specification by ID.
         */
        get: operations["get_model_spec_v1_model_specs__model_spec_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Model Spec
         * @description Delete a model specification.
         */
        delete: operations["delete_model_spec_v1_model_specs__model_spec_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Model Spec
         * @description Update a model specification.
         */
        patch: operations["update_model_spec_v1_model_specs__model_spec_id__patch"];
        trace?: never;
    };
    "/v1/model-specs/by-provider/{provider_spec_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Model Specs By Provider
         * @description List all model specifications for a specific provider.
         */
        get: operations["list_model_specs_by_provider_v1_model_specs_by_provider__provider_spec_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/model-specs/by-provider/{provider_spec_id}/{model_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Model Spec By Provider And Name
         * @description Get a specific model specification by provider and model name.
         */
        get: operations["get_model_spec_by_provider_and_name_v1_model_specs_by_provider__provider_spec_id___model_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/model-specs/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upsert Model Spec
         * @description Create or update a model specification by provider and model name.
         *
         *     This endpoint is useful for bulk operations and bootstrapping.
         */
        post: operations["upsert_model_spec_v1_model_specs_upsert_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/model-instances/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Model Instances
         * @description List model instances.
         */
        get: operations["list_model_instances_v1_model_instances__get"];
        put?: never;
        /**
         * Create Model Instance
         * @description Create a new model instance.
         */
        post: operations["create_model_instance_v1_model_instances__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/model-instances/{instance_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Model Instance
         * @description Get a specific model instance.
         */
        get: operations["get_model_instance_v1_model_instances__instance_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Model Instance
         * @description Delete a model instance.
         */
        delete: operations["delete_model_instance_v1_model_instances__instance_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint for the main application.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/asyncapi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Serve Asyncapi Schema
         * @description Serve the AsyncAPI schema as an HTML response.
         */
        get: operations["serve_asyncapi_schema_asyncapi_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/asyncapi.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download App Json Schema */
        get: operations["download_app_json_schema_asyncapi_json_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/asyncapi.yaml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download App Yaml Schema */
        get: operations["download_app_yaml_schema_asyncapi_yaml_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AGUIRequest
         * @description AG-UI request format.
         */
        AGUIRequest: {
            /** Thread Id */
            thread_id: string;
            /** Run Id */
            run_id?: string | null;
            /** Messages */
            messages: {
                [key: string]: unknown;
            }[];
            /**
             * Tools
             * @default []
             */
            tools: {
                [key: string]: unknown;
            }[];
            /**
             * Context
             * @default []
             */
            context: {
                [key: string]: unknown;
            }[];
            /**
             * Forwarded Props
             * @default {}
             */
            forwarded_props: {
                [key: string]: unknown;
            };
            /**
             * State
             * @default {}
             */
            state: {
                [key: string]: unknown;
            };
        };
        /** AgentAuthentication */
        AgentAuthentication: {
            /** Schemes */
            schemes: string[];
            /** Credentials */
            credentials?: string | null;
        };
        /** AgentCapabilities */
        AgentCapabilities: {
            /**
             * Streaming
             * @default false
             */
            streaming: boolean;
            /**
             * Push Notifications
             * @default false
             */
            push_notifications: boolean;
            /**
             * State Transition History
             * @default false
             */
            state_transition_history: boolean;
        };
        /** AgentCard */
        AgentCard: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Url */
            url: string;
            provider?: components["schemas"]["AgentProvider"] | null;
            /** Version */
            version: string;
            /** Documentation Url */
            documentation_url?: string | null;
            capabilities: components["schemas"]["AgentCapabilities"];
            authentication?: components["schemas"]["AgentAuthentication"] | null;
            /**
             * Default Input Modes
             * @default [
             *       "text"
             *     ]
             */
            default_input_modes: string[];
            /**
             * Default Output Modes
             * @default [
             *       "text"
             *     ]
             */
            default_output_modes: string[];
            /** Skills */
            skills: components["schemas"]["AgentSkill"][];
        };
        /** AgentCreate */
        AgentCreate: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Instruction */
            instruction: string;
            /** Model Id */
            model_id: string;
            tools_config?: components["schemas"]["ToolsConfig"] | null;
            events_config?: components["schemas"]["EventsConfig"] | null;
            /** Planning */
            planning?: boolean | null;
        };
        /** AgentProvider */
        AgentProvider: {
            /** Organization */
            organization: string;
            /** Url */
            url?: string | null;
        };
        /** AgentSkill */
        AgentSkill: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Tags */
            tags?: string[] | null;
            /** Examples */
            examples?: string[] | null;
            /** Input Modes */
            input_modes?: string[] | null;
            /** Output Modes */
            output_modes?: string[] | null;
        };
        /** AgentUpdate */
        AgentUpdate: {
            /** Name */
            name?: string | null;
            /** Capabilities */
            capabilities?: string[] | null;
            /** Description */
            description?: string | null;
            /** Instruction */
            instruction?: string | null;
            /** Model Id */
            model_id?: string | null;
            tools_config?: components["schemas"]["ToolsConfig"] | null;
            events_config?: components["schemas"]["EventsConfig"] | null;
            /** Planning */
            planning?: boolean | null;
        };
        /**
         * ChatMessageRequest
         * @description Unified request model for sending chat messages.
         */
        ChatMessageRequest: {
            /**
             * Content
             * @description Message content
             */
            content: string;
            /**
             * Agent Id
             * @description Target agent ID
             */
            agent_id: string;
            /**
             * User Id
             * @description User sending the message
             */
            user_id?: string | null;
            /**
             * Session Id
             * @description Session/conversation ID
             */
            session_id?: string | null;
            /**
             * Context
             * @description Additional context
             */
            context?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * ChatResponse
         * @description Unified response model for chat messages.
         */
        ChatResponse: {
            /**
             * Task Id
             * @description Task ID for the chat interaction
             */
            task_id: string;
            /**
             * Content
             * @description Response content
             */
            content: string;
            /**
             * Role
             * @description Role (user/assistant)
             */
            role: string;
            /**
             * Session Id
             * @description Session/conversation ID
             */
            session_id: string;
            /**
             * Agent Id
             * @description Agent ID
             */
            agent_id: string;
            /**
             * Status
             * @description Task status
             */
            status: string;
            /**
             * Timestamp
             * @description Message timestamp
             */
            timestamp: string;
        };
        /**
         * ConversationResponse
         * @description Response model for conversation history.
         */
        ConversationResponse: {
            /**
             * Session Id
             * @description Session/conversation ID
             */
            session_id: string;
            /**
             * Messages
             * @description List of messages
             */
            messages: {
                [key: string]: unknown;
            }[];
            /**
             * Agent Id
             * @description Primary agent ID
             */
            agent_id?: string | null;
            /**
             * Message Count
             * @description Number of messages
             */
            message_count: number;
        };
        /** EventsConfig */
        EventsConfig: {
            /** Events */
            events?: string[] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** JSONRPCError */
        JSONRPCError: {
            /** Code */
            code: number;
            /** Message */
            message: string;
            /** Data */
            data?: unknown | null;
        };
        /** JSONRPCResponse */
        JSONRPCResponse: {
            /**
             * Jsonrpc
             * @default 2.0
             * @constant
             */
            jsonrpc: "2.0";
            /** Id */
            id?: number | string | null;
            /** Result */
            result?: unknown | null;
            error?: components["schemas"]["JSONRPCError"] | null;
        };
        /** MCPConfig */
        MCPConfig: {
            /** Mcp Server Id */
            mcp_server_id: string;
            /** Requires User Confirmation */
            requires_user_confirmation?: boolean | null;
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
        };
        /** MCPServerCreate */
        MCPServerCreate: {
            /**
             * Name
             * @description Name of the MCP server
             */
            name: string;
            /**
             * Description
             * @description Description of the MCP server
             */
            description: string;
            /**
             * Docker Image Url
             * @description Docker image URL
             */
            docker_image_url: string;
            /**
             * Version
             * @description Version of the MCP server
             * @default 1.0.0
             */
            version: string;
            /**
             * Tags
             * @description Tags for categorization
             */
            tags?: string[];
            /**
             * Is Public
             * @description Whether the server is public
             * @default false
             */
            is_public: boolean;
            /**
             * Env Schema
             * @description Environment variable schema
             */
            env_schema?: {
                [key: string]: unknown;
            }[] | null;
            /**
             * Cmd
             * @description Custom command to override container CMD (useful for switching between stdio and HTTP modes)
             */
            cmd?: string[] | null;
        };
        /** MCPServerInstanceCreateRequest */
        MCPServerInstanceCreateRequest: {
            /**
             * Name
             * @description Name of the MCP server instance
             */
            name: string;
            /**
             * Description
             * @description Description of the instance
             */
            description?: string | null;
            /**
             * Server Spec Id
             * @description ID of the MCP server spec (optional)
             */
            server_spec_id?: string | null;
            /**
             * Json Spec
             * @description Configuration specification as JSON
             */
            json_spec: {
                [key: string]: unknown;
            };
        };
        /** MCPServerInstanceResponse */
        MCPServerInstanceResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Server Spec Id */
            server_spec_id: string | null;
            /** Json Spec */
            json_spec: {
                [key: string]: unknown;
            };
            /** Status */
            status: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** MCPServerInstanceUpdate */
        MCPServerInstanceUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Json Spec */
            json_spec?: {
                [key: string]: unknown;
            } | null;
            /** Status */
            status?: string | null;
        };
        /** MCPServerResponse */
        MCPServerResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Docker Image Url */
            docker_image_url: string;
            /** Version */
            version: string;
            /** Tags */
            tags: string[];
            /** Is Public */
            is_public: boolean;
            /** Env Schema */
            env_schema: {
                [key: string]: unknown;
            }[];
            /** Cmd */
            cmd: string[] | null;
            /** Status */
            status: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** MCPServerUpdate */
        MCPServerUpdate: {
            /**
             * Name
             * @description Name of the MCP server
             */
            name?: string | null;
            /**
             * Description
             * @description Description of the MCP server
             */
            description?: string | null;
            /**
             * Docker Image Url
             * @description Docker image URL
             */
            docker_image_url?: string | null;
            /**
             * Version
             * @description Version of the MCP server
             */
            version?: string | null;
            /**
             * Tags
             * @description Tags for categorization
             */
            tags?: string[] | null;
            /**
             * Is Public
             * @description Whether the server is public
             */
            is_public?: boolean | null;
            /**
             * Status
             * @description Status of the MCP server
             */
            status?: string | null;
            /**
             * Cmd
             * @description Custom command to override container CMD
             */
            cmd?: string[] | null;
        };
        /** ModelInstanceCreate */
        ModelInstanceCreate: {
            /**
             * Provider Config Id
             * Format: uuid
             */
            provider_config_id: string;
            /**
             * Model Spec Id
             * Format: uuid
             */
            model_spec_id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Is Public
             * @default false
             */
            is_public: boolean;
        };
        /** ModelInstanceResponse */
        ModelInstanceResponse: {
            /** Id */
            id: string;
            /** Provider Config Id */
            provider_config_id: string;
            /** Model Spec Id */
            model_spec_id: string;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Is Active */
            is_active: boolean;
            /** Is Public */
            is_public: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Provider Name */
            provider_name?: string | null;
            /** Provider Key */
            provider_key?: string | null;
            /** Model Name */
            model_name?: string | null;
            /** Model Display Name */
            model_display_name?: string | null;
            /** Config Name */
            config_name?: string | null;
        };
        /** ModelSpecCreate */
        ModelSpecCreate: {
            /**
             * Provider Spec Id
             * Format: uuid
             */
            provider_spec_id: string;
            /** Model Name */
            model_name: string;
            /** Display Name */
            display_name: string;
            /** Description */
            description?: string | null;
            /**
             * Context Window
             * @default 4096
             */
            context_window: number;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
        };
        /** ModelSpecUpdate */
        ModelSpecUpdate: {
            /** Display Name */
            display_name?: string | null;
            /** Description */
            description?: string | null;
            /** Context Window */
            context_window?: number | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /** ProviderConfigCreate */
        ProviderConfigCreate: {
            /**
             * Provider Spec Id
             * Format: uuid
             */
            provider_spec_id: string;
            /** Name */
            name: string;
            /** Api Key */
            api_key: string;
            /** Endpoint Url */
            endpoint_url?: string | null;
            /**
             * Is Public
             * @default false
             */
            is_public: boolean;
        };
        /** ProviderConfigResponse */
        ProviderConfigResponse: {
            /** Id */
            id: string;
            /** Provider Spec Id */
            provider_spec_id: string;
            /** Name */
            name: string;
            /** Endpoint Url */
            endpoint_url: string | null;
            /** User Id */
            user_id: string | null;
            /** Is Active */
            is_active: boolean;
            /** Is Public */
            is_public: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Provider Spec Name */
            provider_spec_name?: string | null;
            /** Provider Spec Key */
            provider_spec_key?: string | null;
        };
        /** ProviderConfigUpdate */
        ProviderConfigUpdate: {
            /** Name */
            name?: string | null;
            /** Api Key */
            api_key?: string | null;
            /** Endpoint Url */
            endpoint_url?: string | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /** ProviderSpecResponse */
        ProviderSpecResponse: {
            /** Id */
            id: string;
            /** Provider Key */
            provider_key: string;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Provider Type */
            provider_type: string;
            /** Icon */
            icon: string | null;
            /** Icon Url */
            icon_url: string | null;
            /** Is Builtin */
            is_builtin: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** ProviderSpecWithModelsResponse */
        ProviderSpecWithModelsResponse: {
            /** Id */
            id: string;
            /** Provider Key */
            provider_key: string;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Provider Type */
            provider_type: string;
            /** Icon */
            icon: string | null;
            /** Icon Url */
            icon_url: string | null;
            /** Is Builtin */
            is_builtin: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Models */
            models: components["schemas"]["agentarea_api__api__v1__provider_specs__ModelSpecResponse"][];
        };
        /** TaskCreate */
        TaskCreate: {
            /** Description */
            description: string;
            /**
             * Parameters
             * @default {}
             */
            parameters: {
                [key: string]: unknown;
            };
            /**
             * User Id
             * @default api_user
             */
            user_id: string | null;
            /**
             * Enable Agent Communication
             * @default true
             */
            enable_agent_communication: boolean | null;
        };
        /** TaskResponse */
        TaskResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Agent Id
             * Format: uuid
             */
            agent_id: string;
            /** Description */
            description: string;
            /** Parameters */
            parameters: {
                [key: string]: unknown;
            };
            /** Status */
            status: string;
            /** Result */
            result?: {
                [key: string]: unknown;
            } | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Execution Id */
            execution_id?: string | null;
        };
        /** ToolsConfig */
        ToolsConfig: {
            /** Mcp Server Configs */
            mcp_server_configs?: components["schemas"]["MCPConfig"][] | null;
            /** Planning */
            planning?: boolean | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** AgentResponse */
        agentarea_api__api__v1__agents__AgentResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Status */
            status: string;
            /** Description */
            description?: string | null;
            /** Instruction */
            instruction?: string | null;
            /** Model Id */
            model_id?: string | null;
            /** Tools Config */
            tools_config?: {
                [key: string]: unknown;
            } | null;
            /** Events Config */
            events_config?: {
                [key: string]: unknown;
            } | null;
            /** Planning */
            planning?: boolean | null;
        };
        /**
         * AgentResponse
         * @description Response model for agent information.
         */
        agentarea_api__api__v1__chat__AgentResponse: {
            /**
             * Id
             * @description Agent ID
             */
            id: string;
            /**
             * Name
             * @description Agent name
             */
            name: string;
            /**
             * Description
             * @description Agent description
             */
            description?: string | null;
            /**
             * Status
             * @description Agent status
             */
            status: string;
        };
        /** ModelSpecResponse */
        agentarea_api__api__v1__model_specs__ModelSpecResponse: {
            /** Id */
            id: string;
            /** Provider Spec Id */
            provider_spec_id: string;
            /** Model Name */
            model_name: string;
            /** Display Name */
            display_name: string;
            /** Description */
            description: string | null;
            /** Context Window */
            context_window: number;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Provider Name */
            provider_name?: string | null;
            /** Provider Key */
            provider_key?: string | null;
        };
        /** ModelSpecResponse */
        agentarea_api__api__v1__provider_specs__ModelSpecResponse: {
            /** Id */
            id: string;
            /** Provider Spec Id */
            provider_spec_id: string;
            /** Model Name */
            model_name: string;
            /** Display Name */
            display_name: string;
            /** Description */
            description: string | null;
            /** Context Window */
            context_window: number;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    handle_jsonrpc_v1_protocol_rpc_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JSONRPCResponse"];
                };
            };
        };
    };
    get_agent_card_v1_protocol_agents__agent_id__card_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentCard"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    handle_ag_ui_request_v1_protocol_ag_ui_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AGUIRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_v1_protocol_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    send_message_v1_chat_messages_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatMessageRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_message_v1_chat_messages_stream_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatMessageRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_conversation_history_v1_chat_conversations__session_id__messages_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_conversations_v1_chat_conversations_get: {
        parameters: {
            query?: {
                /** @description Filter by user ID */
                user_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_available_agents_v1_chat_agents_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__chat__AgentResponse"][];
                };
            };
        };
    };
    get_agent_v1_chat_agents__agent_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__chat__AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_v1_chat_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_agents_v1_agents__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__agents__AgentResponse"][];
                };
            };
        };
    };
    create_agent_v1_agents__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__agents__AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_v1_agents__agent_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__agents__AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_agent_v1_agents__agent_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_agent_v1_agents__agent_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__agents__AgentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_agent_tasks_v1_agents__agent_id__tasks__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_task_for_agent_v1_agents__agent_id__tasks__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_task_v1_agents__agent_id__tasks__task_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_agent_task_v1_agents__agent_id__tasks__task_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_task_status_v1_agents__agent_id__tasks__task_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: string;
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_mcp_servers_v1_mcp_servers__get: {
        parameters: {
            query?: {
                status?: string | null;
                is_public?: boolean | null;
                tag?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_mcp_server_v1_mcp_servers__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MCPServerCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mcp_server_v1_mcp_servers__server_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_mcp_server_v1_mcp_servers__server_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_mcp_server_v1_mcp_servers__server_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MCPServerUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deploy_mcp_server_v1_mcp_servers__server_id__deploy_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mcp_server_templates_v1_mcp_servers_templates_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    }[];
                };
            };
        };
    };
    get_mcp_server_template_v1_mcp_servers_templates__template_key__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_mcp_server_from_template_v1_mcp_servers_from_template__template_key__post: {
        parameters: {
            query: {
                server_name: string;
                server_description?: string;
                version?: string;
            };
            header?: never;
            path: {
                template_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_mcp_server_instances_v1_mcp_server_instances__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerInstanceResponse"][];
                };
            };
        };
    };
    create_mcp_server_instance_v1_mcp_server_instances__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MCPServerInstanceCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_instance_environment_v1_mcp_server_instances__instance_id__environment_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mcp_server_instance_v1_mcp_server_instances__instance_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_mcp_server_instance_v1_mcp_server_instances__instance_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_mcp_server_instance_v1_mcp_server_instances__instance_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MCPServerInstanceUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_mcp_server_instance_v1_mcp_server_instances__instance_id__start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stop_mcp_server_instance_v1_mcp_server_instances__instance_id__stop_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_provider_specs_v1_provider_specs__get: {
        parameters: {
            query?: {
                is_builtin?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderSpecResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_provider_specs_with_models_v1_provider_specs_with_models_get: {
        parameters: {
            query?: {
                is_builtin?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderSpecWithModelsResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_provider_spec_v1_provider_specs__provider_spec_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_spec_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderSpecWithModelsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_provider_spec_by_key_v1_provider_specs_by_key__provider_key__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderSpecWithModelsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_provider_configs_v1_provider_configs__get: {
        parameters: {
            query?: {
                provider_spec_id?: string | null;
                is_active?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderConfigResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_provider_config_v1_provider_configs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProviderConfigCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderConfigResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_provider_config_v1_provider_configs__config_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderConfigResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_provider_config_v1_provider_configs__config_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProviderConfigUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderConfigResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_provider_config_v1_provider_configs__config_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_model_specs_v1_model_specs__get: {
        parameters: {
            query?: {
                provider_spec_id?: string | null;
                is_active?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__model_specs__ModelSpecResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_model_spec_v1_model_specs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModelSpecCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__model_specs__ModelSpecResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_model_spec_v1_model_specs__model_spec_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_spec_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__model_specs__ModelSpecResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_model_spec_v1_model_specs__model_spec_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_spec_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_model_spec_v1_model_specs__model_spec_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_spec_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModelSpecUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__model_specs__ModelSpecResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_model_specs_by_provider_v1_model_specs_by_provider__provider_spec_id__get: {
        parameters: {
            query?: {
                is_active?: boolean | null;
            };
            header?: never;
            path: {
                provider_spec_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__model_specs__ModelSpecResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_model_spec_by_provider_and_name_v1_model_specs_by_provider__provider_spec_id___model_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_spec_id: string;
                model_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__model_specs__ModelSpecResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upsert_model_spec_v1_model_specs_upsert_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModelSpecCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["agentarea_api__api__v1__model_specs__ModelSpecResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_model_instances_v1_model_instances__get: {
        parameters: {
            query?: {
                provider_config_id?: string | null;
                model_spec_id?: string | null;
                is_active?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelInstanceResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_model_instance_v1_model_instances__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModelInstanceCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_model_instance_v1_model_instances__instance_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelInstanceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_model_instance_v1_model_instances__instance_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    serve_asyncapi_schema_asyncapi_get: {
        parameters: {
            query?: {
                sidebar?: boolean;
                info?: boolean;
                servers?: boolean;
                operations?: boolean;
                messages?: boolean;
                schemas?: boolean;
                errors?: boolean;
                expandMessageExamples?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_app_json_schema_asyncapi_json_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    download_app_yaml_schema_asyncapi_yaml_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
