version: '3.8'

services:
  api:
    build: 
      context: .
      dockerfile: apps/api/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/agentarea
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
      - ENV=development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Development mode: mount source code for hot reload
      - ./apps/api/agentarea_api:/app/apps/api/agentarea_api
      - ./libs:/app/libs
      - ./.secrets.json:/app/.secrets.json:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - agentarea-network

  worker:
    build:
      context: .
      dockerfile: apps/worker/Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/agentarea
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
      - ENV=development
      # Temporal configuration
      - TEMPORAL_SERVER_URL=temporal:7233
      - TEMPORAL_NAMESPACE=default
      - TEMPORAL_TASK_QUEUE=agent-task-queue
      - TEMPORAL_MAX_CONCURRENT_ACTIVITIES=10
      - TEMPORAL_MAX_CONCURRENT_WORKFLOWS=10
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_started
    volumes:
      # Development mode: mount source code for hot reload
      - ./apps/worker/agentarea_worker:/app/apps/worker/agentarea_worker
      - ./libs:/app/libs
      - ./.secrets.json:/app/.secrets.json:ro
    restart: unless-stopped
    networks:
      - agentarea-network

  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=agentarea
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d agentarea"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - agentarea-network

  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --requirepass ""
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - agentarea-network

  # Temporal server for workflow orchestration
  temporal:
    image: temporalio/auto-setup:1.24
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=postgres
      - POSTGRES_SEEDS=db
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - "7233:7233"  # gRPC
      - "8233:8233"  # Web UI
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./temporal-config:/etc/temporal/config/dynamicconfig
      - temporal_data:/etc/temporal/db
    networks:
      - agentarea-network

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    profiles:
      - tools
    networks:
      - agentarea-network

  # Optional: pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@agentarea.dev
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    profiles:
      - tools
    networks:
      - agentarea-network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  temporal_data:

networks:
  agentarea-network:
    driver: bridge 