{{/*
  Lookup existing secrets to preserve them across upgrades.
  Only generate new secrets if they don't exist.
*/}}
{{- $postgresSecret := lookup "v1" "Secret" .Release.Namespace .Values.global.secrets.postgresql -}}
{{- $redisSecret := lookup "v1" "Secret" .Release.Namespace .Values.global.secrets.redis -}}
{{- $minioSecret := lookup "v1" "Secret" .Release.Namespace .Values.global.secrets.minio -}}
{{- $appSecret := lookup "v1" "Secret" .Release.Namespace .Values.global.secrets.application -}}

{{/* PostgreSQL password - reuse if exists, otherwise generate */}}
{{- $postgresPassword := "" -}}
{{- if $postgresSecret -}}
  {{- $postgresPassword = index $postgresSecret.data "password" | b64dec -}}
{{- else -}}
  {{- $postgresPassword = randAlphaNum 32 -}}
{{- end -}}

{{/* Redis password - reuse if exists, otherwise generate */}}
{{- $redisPassword := "" -}}
{{- if $redisSecret -}}
  {{- $redisPassword = index $redisSecret.data "redis-password" | b64dec -}}
{{- else -}}
  {{- $redisPassword = randAlphaNum 32 -}}
{{- end -}}

{{/* MinIO credentials - reuse if exists, otherwise generate */}}
{{- $minioAccessKey := "" -}}
{{- $minioSecretKey := "" -}}
{{- if $minioSecret -}}
  {{- $minioAccessKey = index $minioSecret.data "root-user" | b64dec -}}
  {{- $minioSecretKey = index $minioSecret.data "root-password" | b64dec -}}
{{- else -}}
  {{- $minioAccessKey = randAlphaNum 20 -}}
  {{- $minioSecretKey = randAlphaNum 40 -}}
{{- end -}}

{{/* Application secrets - reuse if exists, otherwise generate */}}
{{- $authSecret := "" -}}
{{- $encryptionKey := "" -}}
{{- if $appSecret -}}
  {{- $authSecret = index $appSecret.data "auth-secret" | b64dec -}}
  {{- $encryptionKey = index $appSecret.data "encryption-key" | b64dec -}}
{{- else -}}
  {{- $authSecret = randAlphaNum 44 | b64enc -}}
  {{- $encryptionKey = randAlphaNum 32 | lower -}}
{{- end -}}

---
# PostgreSQL Secret
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.global.secrets.postgresql }}
  labels:
    {{- include "agentarea.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  postgres-password: {{ $postgresPassword | b64enc | quote }}
  password: {{ $postgresPassword | b64enc | quote }}
  username: {{ "postgres" | b64enc | quote }}

---
# Redis Secret
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.global.secrets.redis }}
  labels:
    {{- include "agentarea.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  redis-password: {{ $redisPassword | b64enc | quote }}

---
# MinIO Secret
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.global.secrets.minio }}
  labels:
    {{- include "agentarea.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  root-user: {{ $minioAccessKey | b64enc | quote }}
  root-password: {{ $minioSecretKey | b64enc | quote }}

---
# Application Secrets (JWT, Encryption)
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.global.secrets.application }}
  labels:
    {{- include "agentarea.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # JWT secret for authentication
  auth-secret: {{ $authSecret | quote }}
  # Encryption key for platform encryption/decryption
  encryption-key: {{ $encryptionKey | b64enc | quote }}

