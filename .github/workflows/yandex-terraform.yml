name: Yandex Cloud Terraform

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/yandex/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/yandex/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  YC_SERVICE_ACCOUNT_KEY_FILE: ${{ github.workspace }}/key.json

jobs:
  terraform-check:
    name: Terraform Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format Check
        run: |
          cd terraform/yandex
          terraform fmt -check -recursive
      
      - name: Terraform Validate
        run: |
          cd terraform/yandex/environments/staging
          terraform init -backend=false
          terraform validate
          
          cd ../prod
          terraform init -backend=false
          terraform validate
      
      - name: Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform/yandex
          soft_fail: true

  terraform-plan-staging:
    name: Terraform Plan (Staging)
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    defaults:
      run:
        working-directory: terraform/yandex/environments/staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure Yandex Cloud
        run: |
          echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > ${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}
          echo "YC_SERVICE_ACCOUNT_KEY_FILE=${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}" >> $GITHUB_ENV
      
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        run: terraform init
      
      - name: Terraform Plan
        env:
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID_STAGING }}
          TF_VAR_k8s_token: ${{ secrets.K8S_TOKEN_STAGING }}
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "PLAN_EXITCODE=$?" >> $GITHUB_ENV
      
      - name: Upload Plan
        uses: actions/upload-artifact@v3
        if: env.PLAN_EXITCODE == '2'
        with:
          name: tfplan-staging
          path: terraform/yandex/environments/staging/tfplan
          retention-days: 5
      
      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && env.PLAN_EXITCODE == '2'
        with:
          script: |
            const output = `#### Terraform Plan (Staging) ðŸ“–
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply-staging:
    name: Terraform Apply (Staging)
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' && github.event.inputs.action == 'apply')
    needs: terraform-plan-staging
    environment: staging
    
    defaults:
      run:
        working-directory: terraform/yandex/environments/staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure Yandex Cloud
        run: |
          echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > ${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}
          echo "YC_SERVICE_ACCOUNT_KEY_FILE=${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}" >> $GITHUB_ENV
      
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        run: terraform init
      
      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan-staging
          path: terraform/yandex/environments/staging/
      
      - name: Terraform Apply
        env:
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID_STAGING }}
          TF_VAR_k8s_token: ${{ secrets.K8S_TOKEN_STAGING }}
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        run: terraform apply tfplan

  terraform-plan-prod:
    name: Terraform Plan (Production)
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    
    defaults:
      run:
        working-directory: terraform/yandex/environments/prod
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure Yandex Cloud
        run: |
          echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > ${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}
          echo "YC_SERVICE_ACCOUNT_KEY_FILE=${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}" >> $GITHUB_ENV
      
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        run: terraform init
      
      - name: Terraform Plan
        env:
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID_PROD }}
          TF_VAR_k8s_token: ${{ secrets.K8S_TOKEN_PROD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "PLAN_EXITCODE=$?" >> $GITHUB_ENV
      
      - name: Upload Plan
        uses: actions/upload-artifact@v3
        if: env.PLAN_EXITCODE == '2'
        with:
          name: tfplan-prod
          path: terraform/yandex/environments/prod/tfplan
          retention-days: 5

  terraform-apply-prod:
    name: Terraform Apply (Production)
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.environment == 'prod' && 
      github.event.inputs.action == 'apply'
    needs: terraform-plan-prod
    environment: production
    
    defaults:
      run:
        working-directory: terraform/yandex/environments/prod
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure Yandex Cloud
        run: |
          echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > ${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}
          echo "YC_SERVICE_ACCOUNT_KEY_FILE=${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}" >> $GITHUB_ENV
      
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        run: terraform init
      
      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan-prod
          path: terraform/yandex/environments/prod/
      
      - name: Terraform Apply
        env:
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID_PROD }}
          TF_VAR_k8s_token: ${{ secrets.K8S_TOKEN_PROD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        run: terraform apply tfplan

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    
    defaults:
      run:
        working-directory: terraform/yandex/environments/${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure Yandex Cloud
        run: |
          echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > ${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}
          echo "YC_SERVICE_ACCOUNT_KEY_FILE=${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}" >> $GITHUB_ENV
      
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        run: terraform init
      
      - name: Terraform Destroy
        env:
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ github.event.inputs.environment == 'prod' && secrets.YC_FOLDER_ID_PROD || secrets.YC_FOLDER_ID_STAGING }}
          TF_VAR_k8s_token: ${{ github.event.inputs.environment == 'prod' && secrets.K8S_TOKEN_PROD || secrets.K8S_TOKEN_STAGING }}
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        run: terraform destroy -auto-approve