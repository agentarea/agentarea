name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.12"
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "core/**/pyproject.toml"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: core
        run: |
          uv sync --group lint
          uv sync --group dev

      - name: Run ruff check
        working-directory: core
        run: uv run ruff check .

      - name: Run ruff format check
        working-directory: core
        run: uv run ruff format --check .

      - name: Run pyright
        working-directory: core
        run: uv run pyright

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agentarea_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "core/**/pyproject.toml"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: core
        run: |
          uv sync --group test
          uv sync --group dev

      - name: Run tests
        working-directory: core
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/agentarea_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          uv run pytest tests/ \
            --cov-report=xml \
            --cov-report=term \
            --junitxml=test-results.xml \
            -n auto

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./core/coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: core/test-results.xml

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        component: [api, worker]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install uv (act fallback)
        run: |
          curl -Ls https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Build package
        working-directory: core
        run: uv build apps/${{ matrix.component }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-dist
          path: core/dist/

  docker-api:
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/docker-build-push.yml
    with:
      component: api
      context: core
      dockerfile: core/apps/api/Dockerfile
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      PRIVATE_REGISTRY: ${{ secrets.PRIVATE_REGISTRY }}
      PRIVATE_REGISTRY_USERNAME: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
      PRIVATE_REGISTRY_PASSWORD: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: core
        run: uv sync --group dev

      - name: Run bandit security linter
        working-directory: core
        run: uv run bandit -r . -x tests/ -f json -o bandit-report.json

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: core/bandit-report.json

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install uv (act fallback)
        run: |
          curl -Ls https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: core
        run: uv sync --group dev

      - name: Benchmark build performance
        working-directory: core
        run: |
          echo "## Build Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Build Time |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|" >> $GITHUB_STEP_SUMMARY
          
          for component in api worker; do
            start_time=$(date +%s.%N)
            uv build apps/$component
            end_time=$(date +%s.%N)
            build_time=$(echo "$end_time - $start_time" | bc)
            echo "| $component | ${build_time}s |" >> $GITHUB_STEP_SUMMARY
          done
  docker-worker:
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/docker-build-push.yml
    with:
      component: worker
      context: core
      dockerfile: core/apps/worker/Dockerfile
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      PRIVATE_REGISTRY: ${{ secrets.PRIVATE_REGISTRY }}
      PRIVATE_REGISTRY_USERNAME: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
      PRIVATE_REGISTRY_PASSWORD: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
  docker-frontend:
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/docker-build-push.yml
    with:
      component: frontend
      context: frontend
      dockerfile: frontend/Dockerfile
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      PRIVATE_REGISTRY: ${{ secrets.PRIVATE_REGISTRY }}
      PRIVATE_REGISTRY_USERNAME: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
      PRIVATE_REGISTRY_PASSWORD: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
  docker-bootstrap:
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/docker-build-push.yml
    with:
      component: bootstrap
      context: bootstrap
      dockerfile: bootstrap/Dockerfile
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      PRIVATE_REGISTRY: ${{ secrets.PRIVATE_REGISTRY }}
      PRIVATE_REGISTRY_USERNAME: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
      PRIVATE_REGISTRY_PASSWORD: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
  docker-mcp-manager:
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/docker-build-push.yml
    with:
      component: mcp-manager
      context: mcp-infrastructure/go-mcp-manager
      dockerfile: mcp-infrastructure/go-mcp-manager/Dockerfile
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      PRIVATE_REGISTRY: ${{ secrets.PRIVATE_REGISTRY }}
      PRIVATE_REGISTRY_USERNAME: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
      PRIVATE_REGISTRY_PASSWORD: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}